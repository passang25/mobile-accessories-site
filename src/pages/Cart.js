import React, { useState } from 'react';
import useCart from '../hooks/useCart';
import ProductImageSlider from '../components/ProductImageSlider';

export default function Cart() {
Â  const { cartItems, removeFromCart, clearCart } = useCart();
Â  const [clearing, setClearing] = useState(false);

Â  const total = cartItems.reduce((acc, item) => {
Â  Â  const price = parseInt(item.price.replace(/[^\d]/g, '')) * (item.qty || 1);
Â  Â  return acc + price;
Â  }, 0);

Â  const handleClearCart = async () => {
Â  Â  setClearing(true);
Â  Â  try {
Â  Â  Â  await clearCart();
Â  Â  } catch (err) {
Â  Â  Â  console.error("Failed to clear cart:", err);
Â  Â  } finally {
Â  Â  Â  setClearing(false);
Â  Â  }
Â  };

Â  return (
Â  Â  <div className="min-h-screen pt-20 pb-24 px-4 bg-[#0f172a] text-white">
Â  Â  Â  <h1 className="text-3xl font-extrabold text-cyan-400 mb-4 text-center">ðŸ›’ Your Cart</h1>

Â  Â  Â  {cartItems.length === 0 ? (
Â  Â  Â  Â  <p className="text-gray-300 text-lg text-center">Your cart is empty ðŸ˜”</p>
Â  Â  Â  ) : (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  <div className="space-y-3">
Â  Â  Â  Â  Â  Â  {cartItems.map((item) => (
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  key={item.id}
 className="rounded-xl p-2 sm:p-4 flex flex-col sm:flex-row items-center gap-2 shadow-md"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <div className="w-full sm:w-24 h-24">
Â  Â  Â  Â  Â  Â  Â  Â  Â  {item.images ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ProductImageSlider images={item.images} height="h-full" fit="contain" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  src={item.image}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={item.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-full object-contain rounded"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onError={(e) => (e.target.src = 'https://via.placeholder.com/100')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex-1 w-full text-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="font-semibold text-base text-cyan-300 leading-tight">{item.name}</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-cyan-400 font-bold">{item.price}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-400 mt-1">Qty: <span>{item.qty || 1}</span></p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => removeFromCart(item.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-red-400 hover:text-red-500 underline mt-1"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Remove
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Summary */}
Â  Â  Â  Â  Â  <div className="mt-6 bg-[#1e293b] border border-cyan-500 rounded-xl p-4 text-right space-y-3 shadow-md">
Â  Â  Â  Â  Â  Â  <p className="text-base">
Â  Â  Â  Â  Â  Â  Â  Total:{' '}
Â  Â  Â  Â  Â  Â  Â  <span className="text-xl font-bold text-cyan-300">â‚¹{total}</span>
Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  <button className="w-full py-2 rounded text-white font-semibold bg-gradient-to-r from-teal-400 to-blue-500 shadow-lg hover:shadow-xl transition-all">
Â  Â  Â  Â  Â  Â  Â  Proceed to Checkout
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={handleClearCart}
Â  Â  Â  Â  Â  Â  Â  disabled={clearing}
Â  Â  Â  Â  Â  Â  Â  className={`w-full py-2 text-sm rounded font-semibold transition-all ${
Â  Â  Â  Â  Â  Â  Â  Â  clearing
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-red-300 text-red-800 cursor-not-allowed'
Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-gradient-to-r from-pink-500 to-red-500 text-white hover:shadow-xl'
Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  {clearing ? 'Clearing...' : 'Clear Cart'}
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </>
Â  Â  Â  )}
Â  Â  </div>
Â  );
}
